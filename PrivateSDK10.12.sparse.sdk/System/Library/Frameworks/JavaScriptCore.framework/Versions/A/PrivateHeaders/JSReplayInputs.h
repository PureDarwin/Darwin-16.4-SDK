/*
 * Copyright (C) 2014 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// DO NOT EDIT THIS FILE. It is automatically generated from JSInputs.json
// by the script: JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py

#ifndef JSReplayInputs_h
#define JSReplayInputs_h

#if ENABLE(WEB_REPLAY)
#include "EncodedValue.h"
#include "NondeterministicInput.h"
#include <wtf/TypeCasts.h>
#include <wtf/text/WTFString.h>

namespace JSC {
enum class InputQueue;
}


namespace JSC {
class GetCurrentTime;
class SetRandomSeed;
} // namespace JSC

namespace JSC {
template<> struct JS_EXPORT_PRIVATE InputTraits<GetCurrentTime> {
    static InputQueue queue() { return InputQueue::ScriptMemoizedData; }
    static const String& type();

    static void encode(JSC::EncodedValue&, const GetCurrentTime&);
    static bool decode(JSC::EncodedValue&, std::unique_ptr<GetCurrentTime>&);
};

template<> struct JS_EXPORT_PRIVATE InputTraits<SetRandomSeed> {
    static InputQueue queue() { return InputQueue::ScriptMemoizedData; }
    static const String& type();

    static void encode(JSC::EncodedValue&, const SetRandomSeed&);
    static bool decode(JSC::EncodedValue&, std::unique_ptr<SetRandomSeed>&);
};
template<> struct JS_EXPORT_PRIVATE EncodingTraits<InputQueue> {
    typedef InputQueue DecodedType;

    static EncodedValue encodeValue(const InputQueue& value);
    static bool decodeValue(EncodedValue&, InputQueue& value);
};
} // namespace JSC

namespace JSC {
class GetCurrentTime : public NondeterministicInput<GetCurrentTime> {
public:
    JS_EXPORT_PRIVATE GetCurrentTime(double currentTime);
    virtual ~GetCurrentTime();

    double currentTime() const { return m_currentTime; }
private:
    double m_currentTime;
};

class SetRandomSeed : public NondeterministicInput<SetRandomSeed> {
public:
    JS_EXPORT_PRIVATE SetRandomSeed(uint64_t randomSeed);
    virtual ~SetRandomSeed();

    uint64_t randomSeed() const { return m_randomSeed; }
private:
    uint64_t m_randomSeed;
};
} // namespace JSC

SPECIALIZE_TYPE_TRAITS_BEGIN(JSC::GetCurrentTime)
    static bool isType(const NondeterministicInputBase& input) { return input.type() == InputTraits<JSC::GetCurrentTime>::type(); }
SPECIALIZE_TYPE_TRAITS_END()

SPECIALIZE_TYPE_TRAITS_BEGIN(JSC::SetRandomSeed)
    static bool isType(const NondeterministicInputBase& input) { return input.type() == InputTraits<JSC::SetRandomSeed>::type(); }
SPECIALIZE_TYPE_TRAITS_END()

#define JS_REPLAY_INPUT_NAMES_FOR_EACH(macro) \
    macro(GetCurrentTime) \
    macro(SetRandomSeed) \
    \
// end of JS_REPLAY_INPUT_NAMES_FOR_EACH

#endif // ENABLE(WEB_REPLAY)

#endif // JSReplayInputs_h
